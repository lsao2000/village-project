name: Flutter CI/CD

on:
  pull_request:
    branches:
      - main
      - ubuntu-branch
      - parrot-branch
  push:
    branches:
      - main
      - ubuntu-branch
      - parrot-branch
jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Create .env file for Api key
        run: |
          echo "ANDROID_API_KEY=${{ secrets.ANDROID_API_KEY}}" > .env
          echo "IOS_API_KEY=${{ secrets.IOS_API_KEY}}" >> .env

      - name: Set Up Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: 'oracle'
          java-version: '17'

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'

      - name: Install Dependencies
        run: flutter pub get

      # - name: Run Tests
      #   run: flutter test integration_test -d emulator-5554
      - name: Android Emulator Runner (fork)
      # You may pin to the exact commit or the version.
        # uses: aronwolf90/android-emulator-runner@9d02ca982dcb650b60fc757d094083bb179239a7
        uses: aronwolf90/android-emulator-runner@0.0.6
        with:
          # API level of the platform and system image - e.g. 23 for Android Marshmallow, 29 for Android 10
          api-level: 31
          # target of the system image - default, google_apis, google_apis_playstore, aosp_atd, google_atd, android-wear, android-wear-cn, android-tv or google-tv
          target: google_apis # optional, default is default
          # CPU architecture of the system image - x86, x86_64 or arm64-v8a
          arch: x86 # optional, default is x86
          # hardware profile used for creating the AVD - e.g. `Nexus 6
          # the number of cores to use for the emulator
          # custom AVD name used for creating the Android Virtual Device
          avd-name: my_device # optional, default is test
          # whether to force create the AVD by overwriting an existing AVD with the same name as `avd-name` - `true` or `false`
          # Emulator boot timeout in seconds. If it takes longer to boot, the action would fail - e.g. `300` for 5 minutes
          emulator-boot-timeout: 400
          # command-line options used when launching the emulator - e.g. `-no-window -no-snapshot -camera-back emulated`
          emulator-options: -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim
          # whether to disable animations - true or false
         
          
         
          # Channel to download the SDK components from - `stable`, `beta`, `dev`, `canary`
          channel: stable # optional, default is stable
          # custom script to run - e.g. `./gradlew connectedCheck`
          script: flutter test integration_test
          # custom script to run after creating the AVD and before launching the emulator - e.g. `./adjust-emulator-configs.sh`
         
          
          
      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties

          #6 Building APK
      - name: Build APK
        run: flutter build apk --release

        #7 Building App Bundle (aab)
      - name: Build appBundle
        run: flutter build appbundle

      #   #8 Build IPA ( IOS Build )
      # - name: Build IPA
      #   run: flutter build ipa --no-codesign
      #
      # - name: Compress Archives and IPAs
      #   run: |
      #     cd build
      #     tar -czf ios_build.tar.gz ios

          #9 Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
          # build/ios_build.tar.gz

            #10 Extract Version
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

          #11 Check if Tag Exists
      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
          echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
          echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

          #12 Modify Tag if it Exists
      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV

          #13 Create Release
      - name: Create Release
        if: env.TAG_EXISTS == 'false'
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/flutter-apk/app-release.apk,build/app/outputs/bundle/release/app-release.aab"
          tag: v${{ env.VERSION }}
          token: ${{ secrets.TOKEN }}
          skipIfReleaseExists: true

      - name: Update Existing Release
        if: env.TAG_EXISTS == 'true'
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/flutter-apk/app-release.apk,build/app/outputs/bundle/release/app-release.aab"
          tag: v${{ env.VERSION }}
          token: ${{ secrets.TOKEN }}
          updateOnlyUnreleased: true
